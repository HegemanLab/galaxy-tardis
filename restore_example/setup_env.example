#!/bin/bash
# setup_env.example: Set up environment variable files for restoration example.
#   Adjust or replace any or all environment variables as appropriate to your case.

# Set this to "false" when you want to cleanly install Galaxy; 
#   to "true" when you want to restore from S3-compatible buckets
RESTORE_GALAXY=true
# Name you will use for your Galaxy instance
#  Currently only used by 'screen' and in this file, but you use it as you want
MY_INSTANCE=myinstance
# Prefix for bucket names - again, feel free to change it
MY_BUCKET_PREFIX=myprefix

# Fully nonsymbolic path on docker host to directory that will be
#   mounted as '/export' in container
MY_GALAXY_EXPORT=`readlink -f /path/to/export`
# Path on docker host where usernetes is located, if you are using usernetes,
#   e.g., an unzipped release from https://github.com/rootless-containers/usernetes/releases
MY_USERNETES=~/u7s
# Path to the config file for s3cmd, see https://github.com/s3tools/s3cmd
MY_S3CFG=~/.ssh/s3/${MY_BUCKET_PREFIX}.s3cfg
# Name of configuration-backup bucket on S3-compatible storage; stores backups but not datasets
MY_CONFIG_BUCKET=${MY_BUCKET_PREFIX}-${MY_INSTANCE}.config
# Name of dataset-backup bucket on S3-compatible storage; stores datasets
#   If you are using an S3 or SWIFT object store for Galaxy, use the name of that bucket here
MY_DATASET_BUCKET=${MY_BUCKET_PREFIX}-${MY_INSTANCE}.datasets

# Which docker-compose file to use, probably this is fine
MY_COMPOSE_FILE=docker-compose-env.yml

# Path used in containers that will persist Galaxy data in Docker, probably '/export'
INTERNAL_EXPORT_DIR='/export'
# Path on docker host to directory that will be mounted as '/export' in container
EXPORT_DIR=${MY_GALAXY_EXPORT}

# Parent directory for PostgreSQL; database will be init'ed in subdirectory '$PGDATA_SUBDIR'
PGDATA_PARENT=`readlink -f /path/to/postgres`
MY_GALAXY_POSTGRES=$PGDATA_PARENT
# Name of subdirectory of PGDATA_PARENT for PostgreSQL database
#   will be renamed (to save it) and replaced during restoration.
PGDATA_SUBDIR=main
# Docker image name for PostgreSQL executables
IMAGE_POSTGRES='quay.io/bgruening/galaxy-postgres'
# Docker image tag for PostgreSQL executables
TAG_POSTGRES=9.6.5_for_19.01
# Name of PostgreSQL container
CONTAINER_POSTGRES='galaxy-postgres'

# N.B. that initialization of the Galaxy '/export' may change in the future,
#      but this works for the containers for 19.01
# Docker image name for Galaxy initialization executables
IMAGE_GALAXY_INIT='quay.io/bgruening/galaxy-init'
# Docker image tag for Galaxy initialization executables
TAG_GALAXY='19.01'
# Name of Galaxy initialization container
CONTAINER_GALAXY_INIT='galaxy-init'

# Tag for proftpd
TAG_PROFTPD=for_galaxy_19.01

# Default tag for containers
TAG_DEFAULT="$TAG_GALAXY"

# Postgres password - If the postgres listener is not exposed outside docker 
#    containers, there should be little risk in exposing the password here.
POSTGRES_PASSWORD=chaopagoosaequuashie

# Galaxy-specific envar values vvvvvvvvvvvvvvvvvvvvvvvv
GALAXY_PORT=8080
# Galaxy default-admin
#   TBD - what happens when you change the user's password through the web UI?
GALAXY_DEFAULT_ADMIN_USER=admin
GALAXY_DEFAULT_ADMIN_EMAIL=admin@galaxy.org
GALAXY_DEFAULT_ADMIN_PASSWORD=${POSTGRES_PASSWORD}
GALAXY_DEFAULT_ADMIN_KEY=admin
# galaxy.yml config-file sustitutions
#   These can be overridden in galaxy.yml, but why would you do that?
GALAXY_CONFIG_ADMIN_USERS=admin@galaxy.org
GALAXY_CONFIG_MASTER_API_KEY=3877E10f1e5dA8a97Pf746d3
GALAXY_CONFIG_DATABASE_AUTO_MIGRATE=false
GALAXY_CONFIG_TOOL_CONFIG_FILE=config/tool_conf.xml,config/shed_tool_conf.xml

# disable Docker support for HT-Condor; enable it in a non HPC environment
GALAXY_DOCKER_ENABLED=true
GALAXY_CONFIG_CLEANUP_JOB=onsuccess

GALAXY_PORT=${GALAXY_PORT}
# default destination is our SLURM cluster (no htcondor)
GALAXY_DESTINATIONS_DEFAULT=slurm_cluster
GALAXY_RUNNERS_ENABLE_SLURM=True

# Get all the rabbits in the same queue
RABBITMQ_DEFAULT_PASS=runrabbitrunrunrunru
# Galaxy-specific envar values ^^^^^^^^^^^^^^^^^^^^^^^^^

# Ports to forward outside the "rootless namespace"; 
#   you won't need these if you are running Docker as root 
NET_ADD="
0.0.0.0:8080:${GALAXY_PORT}/tcp
0.0.0.0:5050:5050/tcp
"
NET_REMOVE="
/${GALAXY_PORT}/{ s/[^0-9].*//; p }
/5050/{ s/[^0-9].*//; p }
"

# This is the compose file to run (in this directory)
COMPOSE_FILE=${MY_COMPOSE_FILE}

# These are the containers in the compose file that we intend to run - add or remove a needed
CONTAINERS_TO_RUN='galaxy-postgres galaxy-slurm galaxy-web galaxy-proftpd rabbitmq galaxy-init grafana pgadmin4'

# Extra exported environment variables to set in the galaxy-web container
EXTRA_GALAXY_ENVARS="
# default destination is our SLURM cluster (no htcondor)
GALAXY_DESTINATIONS_DEFAULT=${GALAXY_DESTINATIONS_DEFAULT}
GALAXY_RUNNERS_ENABLE_SLURM=${GALAXY_RUNNERS_ENABLE_SLURM}

# disable Docker support for HT-Condor; enable it in a non HPC environment
GALAXY_DOCKER_ENABLED=${GALAXY_DOCKER_ENABLED}
GALAXY_CONFIG_CLEANUP_JOB=${GALAXY_CONFIG_CLEANUP_JOB}
GALAXY_PORT=${GALAXY_PORT}
# postgres password - If the postgres listener is not exposed outside docker 
#    containers, there should be little risk in exposing the password here.
POSTGRES_PASSWORD=${POSTGRES_PASSWORD}

# Galaxy default-admin
#   TBD - what happens when you change the user's password through the web UI?
GALAXY_DEFAULT_ADMIN_USER=${GALAXY_DEFAULT_ADMIN_USER}
GALAXY_DEFAULT_ADMIN_EMAIL=${GALAXY_DEFAULT_ADMIN_EMAIL}
GALAXY_DEFAULT_ADMIN_PASSWORD=${GALAXY_DEFAULT_ADMIN_PASSWORD}
GALAXY_DEFAULT_ADMIN_KEY=${GALAXY_DEFAULT_ADMIN_KEY}
# galaxy.yml config-file sustitutions
#   These can be overridden in galaxy.yml, but why would you do that?
GALAXY_CONFIG_ADMIN_USERS=${GALAXY_CONFIG_ADMIN_USERS}
GALAXY_CONFIG_MASTER_API_KEY=${GALAXY_CONFIG_MASTER_API_KEY}
GALAXY_CONFIG_DATABASE_AUTO_MIGRATE=${GALAXY_CONFIG_DATABASE_AUTO_MIGRATE}
GALAXY_CONFIG_TOOL_CONFIG_FILE=${GALAXY_CONFIG_TOOL_CONFIG_FILE}

# Get all the rabbits in the same queue
RABBITMQ_DEFAULT_PASS=${RABBITMQ_DEFAULT_PASS}
"

# Now generate the environment files:
source setup_env.in
