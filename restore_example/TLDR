#!/bin/bash
# step 0: `pushd tardis; bash build_notar.sh; popd`
# step 1: `cp globals.example globals.custom` # or choose another name
# step 2: Edit globals.custom as appropriate for your installation
# step 3: `bash -c ". setup_env globals.custom`, which generates
#           ./env-for-TLDR,
#           ./tardis/s3/dest.config,
#           ./env-for-compose-to-source.sh, and
#           ./tags-for-compose-to-source.sh
# step 4: Using ./tardis/s3/dest.s3cfg.example as a guide, create or link
#           ./tardis/s3/dest.s3cfg
#         TODO Explain how to do this using the copy of 's3cmd' in the TARDIS
# step 5: Run as appropriate one or more of the following
#           `bash TLDR fresh`
#           `bash TLDR restore`
#           `bash TLDR run`

# set TLDR_RUN_MODE to second argument if provided: 'fresh', 'run', or 'restore'
if [ ! -z "$1" ]; then
  TLDR_RUN_MODE="$1"
fi

# get required environment variables (e.g., generated by '. setup_env globals.custom')
. env-for-TLDR

# show the required envars that we have; abort if some are not set
echo "
TLDR_RUN_MODE       : ${TLDR_RUN_MODE:?}
MY_INSTANCE         : ${MY_INSTANCE:?}
MY_BUCKET_PREFIX    : ${MY_BUCKET_PREFIX:?}
MY_GALAXY_POSTGRES  : ${MY_GALAXY_POSTGRES:?}
MY_GALAXY_EXPORT    : ${MY_GALAXY_EXPORT:?}
MY_USERNETES        : ${MY_USERNETES:?}
MY_S3CFG            : ${MY_S3CFG:?}
MY_CONFIG           : ${MY_CONFIG_BUCKET:?}
MY_DATASETS         : ${MY_DATASET_BUCKET:?}
MY_COMPOSE_FILE     : ${MY_COMPOSE_FILE:?}
MY_GALAXY_TOOL_DEPS_CONDA_BASE_PYTHON_VERSION : ${MY_GALAXY_TOOL_DEPS_CONDA_BASE_PYTHON_VERSION:?}
ls -l tardis/s3/dest.s3cfg tardis/s3/dest.config
"

# Right now, TLDR assumes that we are running with usernetes' rootless dockerd
#   In the future, it may be desirable to override as ROODO=sudo to use sudo with the rooted dockerd.
ROODO=${ROODO:-'rootlesskit --disable-host-loopback'}

# Create storage directories and set ownership
if [ ! -d ${MY_GALAXY_EXPORT:?}   ]; then $ROODO mkdir -p ${MY_GALAXY_EXPORT}  ; fi
if [ ! -d ${MY_GALAXY_POSTGRES:?} ]; then $ROODO mkdir -p ${MY_GALAXY_POSTGRES}; fi
$ROODO mkdir -p        ${MY_GALAXY_EXPORT:?}/pgadmin
$ROODO chown 1000:50   ${MY_GALAXY_EXPORT:?}/pgadmin/
$ROODO chown 999:1550  ${MY_GALAXY_POSTGRES:?}
$ROODO chmod 775       ${MY_GALAXY_POSTGRES:?}

# Action to terminate script
TERM_ACTION="./compose_stop.sh; sleep 2; swab_orphans; exit 1"
# Catch request to stop
trap "echo TERM caught; ${TERM_ACTION}" TERM
# Catch control-C
trap "echo INT caught; ${TERM_ACTION}" INT
# Support the action taken to terminate script
swab_orphans() {
  # find and destroy exited containers
  for c in $(docker ps -a --filter="status=exited" -q); do
    docker rm $c
  done
  # find and destroy orphaned volumes
  for v in $(docker volume ls -q -f 'dangling=true'); do
    docker volume rm $v
  done
}

# # If you don't want images to update each time you run this,
#     comment out the next line after the first pull:
docker-compose -f ${MY_COMPOSE_FILE:?} pull

case ${TLDR_RUN_MODE:?} in
  run)
    echo "#*#*#*#*#*#*#*#  Running Galaxy with neither initialization nor restoration  #*#*#*#*#*#*#*#"
    if [ ! -f ${MY_GALAXY_EXPORT:?}/config/tool_conf.xml ]; then
      echo "Please run TLDR with TLDR_RUN_MODE=fresh"
      exit 1
    fi
    ;;
  fresh)
    echo "#*#*#*#*#*#*#*#  Not restoring Galaxy, initializng fresh instance if necessary  #*#*#*#*#*#*#*#"
    # Initialize Galaxy
    ./compose_start.sh --init-only --init-db
    # Upgrade the database to match the inited Galaxy's version
    ./compose_start.sh --init-only --upgrade-db
    ;;
  restore)
    echo "#*#*#*#*#*#*#*#  Restoring an instance of Galaxy from S3  #*#*#*#*#*#*#*#"
    # Initialize Galaxy export and database - this kills itself after circa 5 minutes
    ./compose_start.sh --init-only
    echo "#*#*#*#*#*#*#*#  Fetching and applying Galaxy configuration from S3  #*#*#*#*#*#*#*#"
    # You may want to use --Miniconda2 when Galaxy uses python2, but that may not even be necessary
    # You probably ought to use --Miniconda3 when Galaxy uses python3
    ./compose_restore.sh --Miniconda${MY_GALAXY_TOOL_DEPS_CONDA_BASE_PYTHON_VERSION}; if [ $? -ne 0 ]; then echo "FATAL: Updating conda failed - aborting TLDR"; exit 1; fi
    # Restore Galaxy configuration
    ./compose_restore.sh --retrieve_config --apply_config; if [ $? -ne 0 ]; then echo "FATAL: Retrieving or applying config failed - aborting TLDR"; exit 1; fi
    # Fetch datasets from S3 backup; you won't want to do this if you are using an S3 bucket as your object store
    ./compose_restore.sh --datasets; if [ $? -ne 0 ]; then echo "FATAL: Restoring datasets failed - aborting TLDR"; exit 1; fi
    # Replace database schema and contents from S3 backup; once you start using Galaxy, datasets not tracked in database WILL be overwritten!
    ./compose_restore.sh --database; if [ $? -ne 0 ]; then echo "FATAL: Restoring database failed - aborting TLDR"; exit 1; fi
    echo "#*#*#*#*#*#*#*#  Upgrading Galaxy PostgreSQL database  #*#*#*#*#*#*#*#"
    # Upgrade the database to match the inited Galaxy's version
    ./compose_start.sh --init-only --upgrade-db
    ;;
  *)
    echo "Unknown value ${TLDR_RUN_MODE:?} for TLDR_RUN_MODE"
    echo "Please choose one of 'restore', 'fresh', or 'run'"
    echo exit 1
    ;;
esac

# Be sure tool_conf.xml exists, owned by Galaxy
if [ ! -f ${MY_GALAXY_EXPORT:?}/config/tool_conf.xml ]; then
  $ROODO cp ${MY_GALAXY_EXPORT:?}/config/tool_conf.xml.main ${MY_GALAXY_EXPORT:?}/config/tool_conf.xml
  $ROODO chown 1450:1450 ${MY_GALAXY_EXPORT:?}/config/tool_conf.xml
fi

echo "#*#*#*#*#*#*#*#  Starting Galaxy  #*#*#*#*#*#*#*#"
# Start Galaxy - kill by pressing control-C only ONCE for a clean shutdown.
which screen && screen -S ${MY_INSTANCE:?} ./compose_start.sh
which screen || ./compose_start.sh # or, if screen is installed:
# screen -S ${MY_INSTANCE:?} ./compose_start.sh        # Start composition in foreground
# screen -S ${MY_INSTANCE:?} -d -m ./compose_start.sh  # Start composition in foreground
